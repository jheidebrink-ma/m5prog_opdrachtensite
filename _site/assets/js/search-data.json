{"0": {
    "doc": "Les 7",
    "title": "Wat is een custom post type?",
    "content": "Een post type in WordPress kun je zien als een speciaal onderdeel, standaard post types zijn: post, page, user, media. Custom Post Types zijn post types die je zelf aan WordPress toevoegt omdat je extra functionaliteit of een onderscheid nodig hebt. Zorg dat je deze introductie even rustig doorleest zodat je snapt hoe WordPress omgaat met de post types. Wat zijn custom post types binnen WordPress? . Eerst krijg je een uitleg over de normale post types, zodat je het concept post type beter gaat begrijpen. Post types zijn onderdelen binnen WordPress om verschillende soorten content te categoriseren. De twee bekendste ken je al: berichten ( posts ) en pagina’s ( pages ). Er zijn nog een aantal andere post types, maar die gaan wij nu niet behandelen. Meer informatie over post types: https://wordpress.org/documentation/article/what-is-post-type/ Custom post types zijn speciale onderdelen die je binnen jouw site wilt gebruiken. Wanneer gebruik je een custom post type? . Het antwoord is: elke keer wanneer je content toevoegt aan je website die niet in één van de standaard post types past. Een paar voorbeelden: . | products ( producten van een webshop ) | projects ( projecten op een portfolio-website ) | events ( evenementen voor een boekingswebsite ) In mijn hout website maak ik een post type wood, dit zijn straks onderdelen die een aantal unieke eigenschappen krijgen. Bedenk ondertussen wat voor een post type jij nodig hebt in jouw project. | . Custom taxonomieën . Taxonomieën worden bij WordPress gebruikt om post types te categoriseren. Zo kun je later eenvoudig gaan filteren op een bepaalde taxonomie. Voor standaard berichten zijn de twee gebruikte taxonomieën categorieën en tags. Wanneer je een custom post type registreert, kunt je kiezen om een bestaande taxonomie eraan toe te wijzen. Je kunt ook volledig nieuwe taxonomie aanmaken voor je custom post type. Ik ga in mijn voorbeeld ‘origin’ als taxonomie waar ik het land in van oorsprong in opsla. Volgende stap: . Registreren van een post type . ",
    "url": "/m5prog_opdrachtensite/les-7/about#wat-is-een-custom-post-type",
    
    "relUrl": "/les-7/about#wat-is-een-custom-post-type"
  },"1": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-7/about",
    
    "relUrl": "/les-7/about"
  },"2": {
    "doc": "Les 2",
    "title": "Activeer en controleer",
    "content": "Activeer je child thema in de admin omgeving en controleer het thema aan de voorkant van de website. 1- Activeer . Ga nu weer naar het wp-admin gedeelte van je website en selecteer jouw nieuwe thema op dezelfde manier als de vorige keer bij het selecteren van een thema. 2- Controleer . Ga nu in een andere browser of in een privé tab naar jouw website en bekijk je child thema. ",
    "url": "/m5prog_opdrachtensite/les-2/check#activeer-en-controleer",
    
    "relUrl": "/les-2/check#activeer-en-controleer"
  },"3": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-2/check",
    
    "relUrl": "/les-2/check"
  },"4": {
    "doc": "Les 4",
    "title": "data structureren",
    "content": "Voor dit project moet je data in de database plaatsen. Weet je nog welke informatie je moet opslaan? En weet je ook wat voor een soort data typen dit moeten zijn? Zoek de benodigde informatie erbij en neem dan de volgende stap. Tabellen maken . Bekijk welke tabellen je nodig hebt, en welke velden hierin moeten komen. Zorg voor minimaal 2 foreign keys. Data toevoegen . Voeg nu de data toe aan de verschillende tabellen. Hou hier rekening met de parant-child verhouding. Export . Exporteer je data en plaats deze in een zip bestand in de root van je repository. ",
    "url": "/m5prog_opdrachtensite/les-4/data#data-structureren",
    
    "relUrl": "/les-4/data#data-structureren"
  },"5": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-4/data",
    
    "relUrl": "/les-4/data"
  },"6": {
    "doc": "Les 5",
    "title": "PHP koppelen met een database",
    "content": "In PHP kun je met een MySQL-database verbinden via de Mysqli-extensie new mysqli() of PDO-extensie new \\PDO(). Bij gebruik van mysqli maak je eerst een nieuwe connectie met de functie mysqli_connect(), waarbij je de host, gebruikersnaam, wachtwoord en databasenaam opgeeft. Een succesvolle verbinding retourneert een connectie-object waarmee je query’s kunt uitvoeren. In de komende stappen ga je zelf een database verbinding maken met de database. 1- Configuratie bestand . Maak buiten de public folder een config.php bestand aan, bijvoorbeeld in een source folder. Plaats deze code bovenin je config.php om alle errors zichtbaar te maken in je browser: . /** * Display all errors */ ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); . Hieronder gaan wij het algemene .env bestand parsen zodat dit systeem gebruik kan maken van dezelfde waardes. Voorbeeld code Ik maak gebruik van een ternary operator bij het controleren of een waarde gedefinieerd is, dit is een ingekorte if-statement. &lt;?php /** * Parse een .env file waar de instellingen instaan */ $env_array = parse_ini_file(dirname(__DIR__, 1) . '/.env'); /** * Definieer een aantal constante met de waardes uit je .env file */ define('DB_HOST', isset($env_array['DB_HOST']) ? $env_array['DB_HOST'] : '127.0.0.1'); define('DB_NAME', isset($env_array['DB_NAME']) ? $env_array['DB_NAME'] : 'm5prog'); define('DB_USERNAME', isset($env_array['DB_USERNAME']) ? $env_array['DB_USERNAME'] : 'm5prog_user'); define('DB_PASSWORD', isset($env_array['DB_PASSWORD']) ? $env_array['DB_PASSWORD'] : 'wachtwoord'); . 2- Verbind met de database . Nu je de gegevens uit het .env bestand hebt geladen kun je ze gaan gebruiken bij het maken van een verbinding met de database. Je kunt met twee verschillende extensies verbinding maken met een MySQL Database, mysqli en pdo. Hieronder beschrijf ik beide manier van verbinden op de Objectgeoriënteerde manier. Functioneel is ook mogelijk, maar deze wordt minder gebruikt bij bedrijven omdat functioneel als minder schaalbaar gedefinieerd wordt dan OOP ( object georiënteerd). MySQLi . &lt;?php $connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME); . PDO . &lt;?php $dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME . ';port=3306'; $connection = new \\PDO($dsn, DB_USERNAME, DB_PASSWORD, DB_NAME); . Maak een database.php bestand aan in je source folder, haal daar de gegevens uit je config.php op én maak daarin een database verbinding. Het bestand kan er dan zo uit zien: . &lt;?php // haal de configuratie op door het config.php bestand te laden. require_once('../source/config.php'); // Maak een database verbinding waarbij je de constanten uit de .env file gebruikt $connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME); . 3- Data ophalen in je index . Maak nu een verbinding in je index.php met je database.php zodat je in de index.php gegevens uit je database kunt ophalen. Voordat je de data kunt weergeven meot je een aantal stappen doorlopen: 1- Verbind met de database . require_once('../source/database.php'); . 2- Maak een database query en plaats deze in een variabele . $query = 'SELECT * FROM singles ORDER BY title'; . 3- Bereid de query voor om uit te voeren, de database weet nu dat er informatie opgehaald moet worden. $stmt = $connection-&gt;prepare($query); . 4- Voer de query uit, de database heeft nu een query uitgevoerd, maar nog niet het resultaat terug gegeven. $stmt-&gt;execute(); . 5- Vang het resultaat op voor verdere verwerking van de gegevens uit de database. $result = $stmt-&gt;get_result(); . 6- Terwijl ik door de resultaten loop zet elke regel in een variabele die $single heet, het formaat is een associative array . while( $single = mysqli_fetch_assoc($result) ) { print_r( $single ); } . 4- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content uit de database boven de singles staan. ",
    "url": "/m5prog_opdrachtensite/les-5/data#php-koppelen-met-een-database",
    
    "relUrl": "/les-5/data#php-koppelen-met-een-database"
  },"7": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je een overzicht van de informatie uit de database maken. overzicht pagina . ",
    "url": "/m5prog_opdrachtensite/les-5/data#commit-en-push",
    
    "relUrl": "/les-5/data#commit-en-push"
  },"8": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-5/data",
    
    "relUrl": "/les-5/data"
  },"9": {
    "doc": "Les 6",
    "title": "Verwerken van de data",
    "content": "Je hebt nu de juiste gegevens opgehaald uit de url, deze moet je nu gaan koppelen aan de database. 1- Voorbereiding database . Zorg ervoor dat je jouw database voorbereid door een extra veld toe te voegen aan de verschillende tabellen. Noem dit veld slug en zorg dat dit een varchar van 255 karakters is én dat deze uniek is. 2- Voeg data toe aan database . Zorg er nu voor dat je in jouw database bij elk item een unieke slug hebt staan die je kunt gaan opzoeken. 3- Haal de juiste informatie op. Op basis van de de vorige les kun je nu de data ophalen uit de database. Je hebt een variabele $mijn_pagina Deze kun je als slug gebruiken door bijvoorbeeld zo’n query te gebruiken: . $query = 'SELECT * FROM singles WHERE slug=?'; . Vervolgens moet je aan deze query de variabele binden. Welk data type is dit? . $stmt-&gt;bind_param('s', $mijn_pagina); . 4- Permalink ( link vanaf overzicht) . In het overzicht heb jij als het goed is nog ene link naar de singles.php pagina staan. Kun je deze link zo aanpassen dat deze de slug gebruikt? Bijvoorbeeld zo: . &lt;a href=\"/single.php?single=&lt;?php echo $single['slug'] ?&gt;\" type=\"button\" class=\"btn btn-sm btn-outline-secondary\"&gt;Bekijk&lt;/a&gt; . 5- Controleer . Bekijk je website nu in de browser. Kun jij nu de informatie goed zien en ophalen? . ",
    "url": "/m5prog_opdrachtensite/les-6/database#verwerken-van-de-data",
    
    "relUrl": "/les-6/database#verwerken-van-de-data"
  },"10": {
    "doc": "Les 6",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele single weergeven. Data uit database ophalen . ",
    "url": "/m5prog_opdrachtensite/les-6/database#commit-en-push",
    
    "relUrl": "/les-6/database#commit-en-push"
  },"11": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-6/database",
    
    "relUrl": "/les-6/database"
  },"12": {
    "doc": "Les 1",
    "title": "HTML bestanden",
    "content": "Nu je de file structuur hebt van je project is het tijd om ervoor te zorgen dat je ook iets kunt zien. 1- index.php . In je index.php bestand plaats je een HTML structuur, bijvoorbeeld: . &lt;html&gt; &lt;head&gt; &lt;title&gt;Music Library&lt;/title&gt; &lt;!-- ik laad op dit moment een simpele bootstrap css library --&gt; &lt;!-- zie: https://getbootstrap.com/docs/5.3/getting-started/introduction/ --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\"&gt; &lt;link href=\"assets/css/style.css\" rel=\"stylesheet\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;header&gt; Header information &lt;/header&gt; &lt;div class=\"album py-5 bg-light\"&gt; &lt;div class=\"row\"&gt; Content of this project &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- ik laad op dit moment een simpele bootstrap JavaScript library --&gt; &lt;!-- zie: https://getbootstrap.com/docs/5.3/getting-started/introduction/ --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . 2- Demo data . In mijn voorbeeld maak ik gebruik van Bootstrap, hiermee kan ik snel een basis structuur voor een website opzetten. 3- css . Je ziet in de code dat ik een stylesheet bestand laad assets/css/style.css. Zorg dat je die ook aangemaakt hebt in de public folder zodat de browser bij deze bestanden kan. ",
    "url": "/m5prog_opdrachtensite/les-1/html#html-bestanden",
    
    "relUrl": "/les-1/html#html-bestanden"
  },"13": {
    "doc": "Les 1",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . testen . ",
    "url": "/m5prog_opdrachtensite/les-1/html#commit-en-push",
    
    "relUrl": "/les-1/html#commit-en-push"
  },"14": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-1/html",
    
    "relUrl": "/les-1/html"
  },"15": {
    "doc": "Les 1",
    "title": "HTML bestanden",
    "content": "Nu je de structuur hebt van je project is het tijd om ervoor te zorgen dat je ook iets kunt zien. Aan het eind van deze les heb je 3 verschillende pagina’s op je website. Wij werken vanaf nu met *.php bestanden zodat wij straks dynamische content kunnen plaatsen. 1- Bootstrap . Het is nu tijd om de html pagina in te delen. Je kunt hiervoor gebruik maken van een standaard template van het frontend framework Bootstrap. Hier vind je meer informatie over Bootstrap. In deze les beginnen wij ook met de vormgeving, maar voor nu is de structuur belangrijk. 2- HTML . Hier kun je diverse Bootstrap voorbeelden vinden: Download Bootstrap Examples Ik gebruik voor nu het voorbeeld CDN-starter Bekijk hier de complete HTML pagina: index.html In de index.php plaats ik de basis HTML stuctuur uit de index.html zodat ik een complete HTML pagina zie op mijn website. 3- Navigatie . Zoek nu in je source het gedeelte op van de navigatie en pas deze zo aan dat je kunt linken naar de volgende 3 pagina’s: . | index.php ( home pagina ) | single.php ( detail pagina ) | about.php ( over deze site pagina ) | . 4- About en Single pages . Kopieer nu de index.php naar de single.php én about.php Je hebt nu een website met 3 dezelfde pagina’s. Verander wel de titel en een paar stukken van de tekst zodat je weet welke pagina je bekijkt. ",
    "url": "/m5prog_opdrachtensite/les-2/html#html-bestanden",
    
    "relUrl": "/les-2/html#html-bestanden"
  },"16": {
    "doc": "Les 1",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Bootstrap via Sass en Webpack . ",
    "url": "/m5prog_opdrachtensite/les-2/html#commit-en-push",
    
    "relUrl": "/les-2/html#commit-en-push"
  },"17": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-2/html",
    
    "relUrl": "/les-2/html"
  },"18": {
    "doc": "Les 3",
    "title": "Hergebruik van bestanden",
    "content": "In PHP worden include en require gebruikt om externe bestanden in te laden, wat helpt bij het hergebruiken van code en het beter structureren van projecten. Het verschil tussen de twee zit in hoe ze omgaan met fouten. Include . include zal bij een fout, zoals een ontbrekend bestand, een waarschuwing geven maar het script verder laten uitvoeren. Dit is handig als de ingeladen code niet essentieel is voor het functioneren van de pagina. Als je achter include _once plaatst dan zal dit document maar één keer geladen worden, zo voorkom je dubbele code. Voorbeeld: include( ‘../views/footer.php’ ); . Require . require daarentegen, zal bij een fout een fatale foutmelding geven en de uitvoering van het script volledig stoppen, omdat de ingeladen code als cruciaal wordt beschouwd. Dit is handig als de ingeladen code essentieel is voor het functioneren van de website. Als je achter require _once plaatst dan zal dit document maar één keer geladen worden, zo voorkom je dubbele code. Voorbeeld: require_once( ‘../views/data.php’ ); . DRY . Binnen de software ontwikkeling werken wij volgens het DRY principe, dit betekent dat je zo min mogelijk dubbel werk doet. De afkorting staat voor: Dont Repeat Yourself . 1- Views . Maak buiten de public folder een map aan en noem deze views. Deze folder is niet te benaderen vanuit de browser, en zal straks verschillende views ( weergave ) bestanden gaan bevatten. 2- Zoek duplicate code . Bekijk nu de 3 php bestanden in jouw code en zoek stukken code die regelmatig voorkomt. Plaats deze code in een nieuw bestand in de views folder. ( knip en plak ) Ik maak bijvoorbeeld een navigation.php bestand aan en plaats daar mijn menu in. Zie bijvoorbeeld dit bestand: navigation.php Herhaal dit ook met de header en de footer. 3- Laad de externe code . Plaats nu op de plek waar je de code hebt geknipt een include, include_once, require of een require_once om ervoor te zorgen dat dee nieuwe code geladen wordt. Maak zelf een keuze wat je het beste kunt gebruiken. ",
    "url": "/m5prog_opdrachtensite/les-3/include_require#hergebruik-van-bestanden",
    
    "relUrl": "/les-3/include_require#hergebruik-van-bestanden"
  },"19": {
    "doc": "Les 3",
    "title": "Testen",
    "content": "Controleer nu of het resultaat is zoals je verwacht. Ga naar jouw website en klik rond om te zien of er geen onverwachte resultaten zijn. Maak eventueel aanpassingen als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-3/include_require#testen",
    
    "relUrl": "/les-3/include_require#testen"
  },"20": {
    "doc": "Les 3",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Loops . ",
    "url": "/m5prog_opdrachtensite/les-3/include_require#commit-en-push",
    
    "relUrl": "/les-3/include_require#commit-en-push"
  },"21": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-3/include_require",
    
    "relUrl": "/les-3/include_require"
  },"22": {
    "doc": "Les 1",
    "title": "Les 1 - Development omgeving instellen",
    "content": ". Docker en structuur van documenten. Waar staat wat. Maak gebruik van gitignore en .env . Maak de opdrachten voor deze les . | Start | Development omgeving opzetten | HTML bestanden | Testen | . ",
    "url": "/m5prog_opdrachtensite/les-1/#les-1---development-omgeving-instellen",
    
    "relUrl": "/les-1/#les-1---development-omgeving-instellen"
  },"23": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-1/",
    
    "relUrl": "/les-1/"
  },"24": {
    "doc": "Home",
    "title": "WordPress - Home",
    "content": "Op deze website vind je de opdrachten voor de unit M5PROG waarbij wij een custom thema voor WordPress gaan ontwikkelen. ",
    "url": "/m5prog_opdrachtensite/#wordpress---home",
    
    "relUrl": "/#wordpress---home"
  },"25": {
    "doc": "Home",
    "title": "Planning",
    "content": ". ",
    "url": "/m5prog_opdrachtensite/#planning",
    
    "relUrl": "/#planning"
  },"26": {
    "doc": "Home",
    "title": "Opdrachten en uitleg",
    "content": " ",
    "url": "/m5prog_opdrachtensite/#opdrachten-en-uitleg",
    
    "relUrl": "/#opdrachten-en-uitleg"
  },"27": {
    "doc": "Home",
    "title": "Les 1:  Development omgeving instellen",
    "content": "Docker en structuur van documenten. Waar staat wat. Maak gebruik van gitignore en .env . Start . ",
    "url": "/m5prog_opdrachtensite/#les-1--development-omgeving-instellen",
    
    "relUrl": "/#les-1--development-omgeving-instellen"
  },"28": {
    "doc": "Home",
    "title": "Les 2:  HTML Frontend",
    "content": "Ontwikkel een basis html site voor dit project met behulp van een front-end framework. Start . ",
    "url": "/m5prog_opdrachtensite/#les-2--html-frontend",
    
    "relUrl": "/#les-2--html-frontend"
  },"29": {
    "doc": "Home",
    "title": "Les 3:  Bestand structuur met PHP",
    "content": "Dynamische onderdelen op de website, hergebruik van bestanden. Start . ",
    "url": "/m5prog_opdrachtensite/#les-3--bestand-structuur-met-php",
    
    "relUrl": "/#les-3--bestand-structuur-met-php"
  },"30": {
    "doc": "Home",
    "title": "Les 4:  MySQL data structureren",
    "content": "Data in de database plaatsen en afbeeldingen op beschikbaar maken voor public. Start . ",
    "url": "/m5prog_opdrachtensite/#les-4--mysql-data-structureren",
    
    "relUrl": "/#les-4--mysql-data-structureren"
  },"31": {
    "doc": "Home",
    "title": "Les 5:  PHP - MySQL",
    "content": "Data uit de database halen en weergeven. Start . ",
    "url": "/m5prog_opdrachtensite/#les-5--php---mysql",
    
    "relUrl": "/#les-5--php---mysql"
  },"32": {
    "doc": "Home",
    "title": "Les 6:  SEO",
    "content": "Slug / SEO friendly url, titels . Start . ",
    "url": "/m5prog_opdrachtensite/#les-6--seo",
    
    "relUrl": "/#les-6--seo"
  },"33": {
    "doc": "Home",
    "title": "Les 7:  Zoeken",
    "content": "Deze les komt binnenkort online. Vanaf 24-10-2024 online . ",
    "url": "/m5prog_opdrachtensite/#les-7--zoeken",
    
    "relUrl": "/#les-7--zoeken"
  },"34": {
    "doc": "Home",
    "title": "Les 8:  Afronden",
    "content": "Deze les komt binnenkort online. Vanaf 24-10-2024 online . ",
    "url": "/m5prog_opdrachtensite/#les-8--afronden",
    
    "relUrl": "/#les-8--afronden"
  },"35": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/m5prog_opdrachtensite/",
    
    "relUrl": "/"
  },"36": {
    "doc": "Les 4",
    "title": "Les 4 - MySQL data structureren",
    "content": ". Data in de database plaatsen en afbeeldingen op beschikbaar maken voor public. Maak de opdrachten voor deze les . | Database in Docker | RDBMS beheer tool | Data structureren | . ",
    "url": "/m5prog_opdrachtensite/les-4/index#les-4---mysql-data-structureren",
    
    "relUrl": "/les-4/index#les-4---mysql-data-structureren"
  },"37": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-4/index",
    
    "relUrl": "/les-4/index"
  },"38": {
    "doc": "Les 6",
    "title": "Les 6 - SEO",
    "content": ". Slug / SEO friendly url, titels . Maak de opdrachten voor deze les . | Redirect naar index.php | Verwerken van url | Data uit database ophalen | . ",
    "url": "/m5prog_opdrachtensite/les-6/index#les-6---seo",
    
    "relUrl": "/les-6/index#les-6---seo"
  },"39": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-6/index",
    
    "relUrl": "/les-6/index"
  },"40": {
    "doc": "Les 2",
    "title": "Les 2 - HTML Frontend",
    "content": ". Ontwikkel een basis html site voor dit project met behulp van een front-end framework. Maak de opdrachten voor deze les . | Maak een basis HTML structuur | Bootstrap via Sass en Webpack | . ",
    "url": "/m5prog_opdrachtensite/les-2/index#les-2---html-frontend",
    
    "relUrl": "/les-2/index#les-2---html-frontend"
  },"41": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-2/index",
    
    "relUrl": "/les-2/index"
  },"42": {
    "doc": "Les 8",
    "title": "Les 8 - Afronden",
    "content": ". Test het project en lever het resultaat in. Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m5prog_opdrachtensite/les-8/index#les-8---afronden",
    
    "relUrl": "/les-8/index#les-8---afronden"
  },"43": {
    "doc": "Les 8",
    "title": "Les 8",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-8/index",
    
    "relUrl": "/les-8/index"
  },"44": {
    "doc": "Les 5",
    "title": "Les 5 - PHP - MySQL",
    "content": ". Data uit de database halen en weergeven. Maak de opdrachten voor deze les . | data uit de db weergeven | overzicht pagina | single pagina | GET / POST / REQUEST | . ",
    "url": "/m5prog_opdrachtensite/les-5/index#les-5---php---mysql",
    
    "relUrl": "/les-5/index#les-5---php---mysql"
  },"45": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-5/index",
    
    "relUrl": "/les-5/index"
  },"46": {
    "doc": "Les 3",
    "title": "Les 3 - Bestand structuur met PHP",
    "content": ". Dynamische onderdelen op de website, hergebruik van bestanden. Maak de opdrachten voor deze les . | PHP | Include en Require | Loops | . ",
    "url": "/m5prog_opdrachtensite/les-3/index#les-3---bestand-structuur-met-php",
    
    "relUrl": "/les-3/index#les-3---bestand-structuur-met-php"
  },"47": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-3/index",
    
    "relUrl": "/les-3/index"
  },"48": {
    "doc": "Les 7",
    "title": "Les 7 - Zoeken",
    "content": ". Zoeken door de database vanuit de front-end . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m5prog_opdrachtensite/les-7/index#les-7---zoeken",
    
    "relUrl": "/les-7/index#les-7---zoeken"
  },"49": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-7/index",
    
    "relUrl": "/les-7/index"
  },"50": {
    "doc": "Les 1",
    "title": "Development omgeving starten",
    "content": "We gaan een Docker container samenstellen. Deze omgeving gaan wij tijdens deze gehele module gebruiken. ",
    "url": "/m5prog_opdrachtensite/les-1/installatie#development-omgeving-starten",
    
    "relUrl": "/les-1/installatie#development-omgeving-starten"
  },"51": {
    "doc": "Les 1",
    "title": "Requirements",
    "content": "Er zijn een aantal vereisten aan dit project: . | Je hebt een werkende Docker Desktop installatie. | De volgende poorten zijn niet in gebruik: . | 80 | 3305 | 8805 | . | Je hebt een werkende IDE waarmee je websites kunt ontwikkelen, bijvoorbeeld Visual Code of PhpStorm | . 1- Repository . 1- Maak een nieuwe repository aan in GitHub voor m5prog-music_library, zorg dat de repository private is. 2- Navigeer op je computer naar de folder waar je project straks komt te staan, niet een nieuwe lege folder aanmaken. 3- Clone je github project zodat je een nieuwe folder hebt die gekoppeld is aan git en waar straks je bestanden in komen. 2- Docker container initialiseren . | Start eerst Docker Desktop | Navigeer naar de repo folder die je net gekloond hebt | Maak een nieuw bestand aan met de naam: docker-compose.yml | maak de structuur van dit yml bestand services: NAAM: image: WELKE IMAGE HEB JE NODIG container_name: prog_m5_TYPE environment: title: waarde INTERNE CONSTANTEN ports: - EXTERN:INTERN - 9999:80 links: - IS DEZE CONTAINER GEKOPPELD AAN EEN ANDERE CONTAINER? volumes: - './:/var/www/html' depends_on: - HEEFT DEZE CONTAINER EEN ANDERE CONTAINER NODIG? . | . 3- Definieer de volgende containers: . | php met image: wodby/php:latest | nginx met de image: nginx:latest en de externe poort 80 | mariadb met de image: mariadb:latest | phpmyadmin met de image: phpmyadmin:latest en de externe poort 8805 | In de php link je de volgende volumes: './:/var/www/html' . | De Nginx container link je aan php en plaats je de volgende volumes: './:/var/www/html' './docker:/etc/nginx/conf.d' . | De Mariadb container heeft de volgende environment constanten nodig: MYSQL_DATABASE: '${DB_NAME}' MYSQL_USER: '${DB_USERNAME}' MYSQL_PASSWORD: '${DB_PASSWORD}' MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}' . | De PhpMyAdmin container heeft de volgende environment constanten nodig: PMA_HOST: '${DB_HOST}' PMA_USER: '${DB_USERNAME}' PMA_PASSWORD: '${DB_PASSWORD}' . | . 4- Variabele in een .env file . Vanaf dit project zorg je dat de credentials niet meer in de repo terecht komen. | maak een voorbeeld .env file aan met de naam: .env.example | plaats hierin de variabele die je straks gaat gebruiken: DB_NAME= DB_USERNAME= DB_PASSWORD= DB_ROOT_PASSWORD= . | dupliceer dit bestand naar: .env | vul de waardes in deze .env file | . 5- Negeren van bestanden via de .gitignore . Maak nu een .gitignore file aan om te zorgen dat niet alles naar git gaat. Hierbij een voorbeeld inhoud: . ### Node an Vendor files node_modules/ vendor/ ### JetBrains .idea ### Linux *~ .Trash-* ### Windows Thumbs.db ehthumbs.db Desktop.ini $RECYCLE.BIN/ *.cab *.msi *.msm *.msp *.lnk ### OSX .DS_Store .AppleDouble .LSOverride .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns ### Application .env _sources . 6- Public folder . Maak een public folder aan waarin de bestanden komen die de browser mag benaderen. | in de root van je project plaats je een folder met de naam: public | plaats in deze folder een bestand index.php | . 7- NGINX config . Maak in de root een nieuwe folder: docker aan. Plaats in deze folder een bestand: nginx.conf Plaats de volgende code in dit bestand: . server { listen 80 default_server; listen [::]:80 default_server; server_name localhost; root /var/www/html/public; index index.php index.html; # Support Yii2 pretty URL routing location / { try_files $uri $uri/ =404; if (!-e $request_filename){ rewrite ^/(.*) /index.php?r=$1 last; } } location ~* \\.php$ { fastcgi_pass php:9000; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; } # Prevent additional headers like TRACE, DELETE, PUSH if ($request_method !~ ^(GET|HEAD|POST)$ ) { return 405; } } . 8- Start docker . Start nu docker met het volgende commando: docker compose up . 9- Note . Wanneer je problemen blijft houden met je docker bestand, gebruik dan dit complete voorbeeld: example . ",
    "url": "/m5prog_opdrachtensite/les-1/installatie#requirements",
    
    "relUrl": "/les-1/installatie#requirements"
  },"52": {
    "doc": "Les 1",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . html bestanden . ",
    "url": "/m5prog_opdrachtensite/les-1/installatie#commit-en-push",
    
    "relUrl": "/les-1/installatie#commit-en-push"
  },"53": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-1/installatie",
    
    "relUrl": "/les-1/installatie"
  },"54": {
    "doc": "Les 8",
    "title": "Wat is lokalisatie binnen WordPress?",
    "content": "Een WordPress thema of plugin kan een eigen vertaling hebben voor verschillende onderdelen zoals buttons, labels en andere vaste onderdelen. Binnen WordPress kun je redelijk eenvoudig een thema of plugin vertalen, dit noemen wij Lokalisatie. Lokalisatie wordt afgekort als l10n (omdat er 10 letters tussen de l en de n staan). 1- Text-domein instellen . In de style.css kun je het text-domein instellen. Dit is een string waarin je de naam van het thema aangeeft. Binnen je thema gebruik je deze string al op verschillende plekken. Dat doe je met deze regel: . Text Domain: m5prog-custom . Die waarde gebruik je overal waar je een vertaalde tekst wilt terug geven ( return ). Dit heb je al een paar keer gedaan, bijvoorbeeld hier: . __( 'Header Menu', 'm5prog-custom' ) . Of als je direct iets wilt weergeven ( echo ) . _e( 'Header Menu', 'm5prog-custom' ) . 2- Thema vertalen . Er zijn verschillende tools om een thema of plugin te vertalen. In mijn voorbeeld maak ik gebruik van Poeedit Deze tool kan alle bestanden van je thema of plugin laten controleren en zie precies wat je moet vertalen. Nadat je het *.pot bestand vertaald hebt en opgeslagen heb je een *.po én een *.mo bestand. Deze bestanden bevatten jouw echte vertalingen. Maak nu een nederlandse vertaling van je project (nl_NL). 3- Locatie van de vertalingen instellen . WordPress weet niet standaard waar de vertalingen staan, daarom moeten wij een via een action-hook aangeven waar de bestanden staan. Door een nieuwe actie toe te voegen aan de after_setup_theme hook zullen de vertalingen geladen worden nadat WordPress het thema heeft geïnitialiseerd. Dat doe je door deze code toe te voegen aan je functions.php: . /** * Tell WordPress where the localization files are * * @return void */ function load_custom_textdomain() { load_theme_textdomain( 'm5prog-custom', get_template_directory() . '/languages' ); } add_action('after_setup_theme', 'load_custom_textdomain'); . 4- Vertaling controleren . In wp-admin kun je naar jouw profiel gaan door rechtsboven op je naam te klikken. Halverwege deze pagina kun je een taal selecteren, selecteer hier nu Nederlands en sla de wijzigingen op. Als je nu in de wp-admin omgeving naar het Widgets onderdeel gaat dan zie je nu dat de onderdelen in het Nederlands zijn. Links . | developer.wordpress.org localization | Poeedit | . ",
    "url": "/m5prog_opdrachtensite/les-8/localization#wat-is-lokalisatie-binnen-wordpress",
    
    "relUrl": "/les-8/localization#wat-is-lokalisatie-binnen-wordpress"
  },"55": {
    "doc": "Les 8",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-8/localization#commit-en-push",
    
    "relUrl": "/les-8/localization#commit-en-push"
  },"56": {
    "doc": "Les 8",
    "title": "Les 8",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-8/localization",
    
    "relUrl": "/les-8/localization"
  },"57": {
    "doc": "Les 3",
    "title": "Loops",
    "content": "Een loop in programmeren is een constructie waarmee je een stuk code meerdere keren kunt herhalen, zolang aan een bepaalde voorwaarde wordt voldaan. Dit is handig als je een taak herhaaldelijk moet uitvoeren zonder dezelfde code steeds opnieuw te schrijven. 1- While loop . Meerdere regels met een while construct. while (condition){ statement1; statement2; } . Enkele regel do while construct. do statement1; while (condition); . 2- Do While loop . Meerdere regels met do while construct. do { statement1; statement2; } while (condition) . 3- For loop . Enkele regel met een for loop construct. for (start_expr; condition; loop_expression) statement1; . Meerdere regels met een loop construct. for (start_expr; condition; loop_expression) { statement1; statement2; } . 4- Foreach loop . Loop door een array of object en plaats de key van de regel in de variabele ‘$key’ en de inhoud in de regel ‘$item’. foreach ( $array as $key =&gt; $item ) { statement1; statement2; } . Loop door een array of object en plaats de inhoud in de regel ‘$item’. De key wordt niet gebruikt. foreach ( $array as $item ) { statement1; statement2; } . 5- Onderbreking of beëindiging van script . continue; Sla deze keer de loop-lus over. Het script dat in de loop staat wordt deze keer niet uitgevoerd en de loop begint aan de volgende ronde. break; Stopt op het moment met de binnenste loop. exit(\"string\"); Beëindig alle scripts en laat een bericht zien. die(\"string\"); Beëindig alles en laat een bericht zien. 6- Plaats een loop in je code . Bekijk nu bijvoorbeeld jouw index pagina, kom je een plek tegen waar je bepaalde elementen meerdere keren gebruikt? Bijvoorbeeld het overzicht van de singles. Voor nu is het niet erg als je meerdere keren hetzelfde item op je overzicht pagina hebt staan. Volgende week maken wij dit dynamisch. ",
    "url": "/m5prog_opdrachtensite/les-3/loops#loops",
    
    "relUrl": "/les-3/loops#loops"
  },"58": {
    "doc": "Les 3",
    "title": "Testen",
    "content": "Controleer nu of het resultaat is zoals je verwacht. Ga naar jouw website en klik rond om te zien of er geen onverwachte resultaten zijn. Maak eventueel aanpassingen als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-3/loops#testen",
    
    "relUrl": "/les-3/loops#testen"
  },"59": {
    "doc": "Les 3",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-3/loops#commit-en-push",
    
    "relUrl": "/les-3/loops#commit-en-push"
  },"60": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-3/loops",
    
    "relUrl": "/les-3/loops"
  },"61": {
    "doc": "Les 1",
    "title": "Muziek bibliotheek",
    "content": "In deze periode gaan een Muziek bibliotheek maken op basis van Docker en php. Het doel is om te leren hoe je bestanden op een server moet structureren. 1- Onderzoek wat er gedaan moet worden . | Lees eerst de project omschrijving zodat je weet wat er van je verwacht wordt. | . 2- Verzamel data . Verzamel minimaal 5 muziek nummers die je wilt gebruiken in je website. Verzamel hiervan de volgende onderdelen: . | Titel van het nummer | Naam van de artiest | Genre | Duur van het nummer | Release datum ( jaar is goed genoeg ) | Afbeelding van het nummer | Afbeelding van de artiest | . Volgende stap: . Development omgeving opzetten . ",
    "url": "/m5prog_opdrachtensite/les-1/onderwerp#muziek-bibliotheek",
    
    "relUrl": "/les-1/onderwerp#muziek-bibliotheek"
  },"62": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-1/onderwerp",
    
    "relUrl": "/les-1/onderwerp"
  },"63": {
    "doc": "Les 5",
    "title": "Overzicht pagina maken vanuit de database",
    "content": "Je hebt nu de data opgehaald uit de database, deze ga je nu weergeven op de home pagina en linken aan een single pagina. 1- Implementeer loop . In de while loop verwijder je nu de print_r omdat je weet dat alles werkt. Vervolgens laad je nu op deze plek de card.php Als het goed is zie je nu meerdere keren hetzelfde kaartje langskomen op jouw index. 2- Verwerk de data in card.php . Binnen de while loop heb je nu een variabele $single Deze kun je ook in card.php gebruiken, weet je nog wat voor een type het is? Zoek nu de plek op waar je bijvoorbeeld de title wilt weergeven. Plaats daar de volgende php code om een onderdeel uit de $single array weer te geven. &lt;?php echo $single['title'] ?&gt; . Zo ziet de titel er dan bijvoorbeeld uit in de card.php . &lt;div class=\"card-header\"&gt; &lt;h4 class=\"my-0 font-weight-normal\"&gt;&lt;?php echo $single['title'] ?&gt;&lt;/h4&gt; &lt;/div&gt; . 3- Geef nu ook de andere velden toe . Zorg ervoor dat ook de afbeelding zichtbaar is uit de database. De code daarvoor kan er zo uit zien: . &lt;div class=\"card-img\"&gt; &lt;img class=\"card-img-top\" src=\"&lt;?php echo $single['image'] ?&gt;\" alt=\"&lt;?php echo $single['title'] ?&gt;\"&gt; &lt;/div&gt; . 4- Join query . Kun je nu de query zo aanpassen dat je ook de artiest naam en genre kunt weergeven bij de kaartjes? . 5- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content uit de database boven de singles staan. ",
    "url": "/m5prog_opdrachtensite/les-5/overzicht#overzicht-pagina-maken-vanuit-de-database",
    
    "relUrl": "/les-5/overzicht#overzicht-pagina-maken-vanuit-de-database"
  },"64": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele single weergeven. GET / POST / REQUEST . ",
    "url": "/m5prog_opdrachtensite/les-5/overzicht#commit-en-push",
    
    "relUrl": "/les-5/overzicht#commit-en-push"
  },"65": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-5/overzicht",
    
    "relUrl": "/les-5/overzicht"
  },"66": {
    "doc": "Les 3",
    "title": "PHP",
    "content": "PHP (Hypertext Preprocessor) is een server-side scriptingtaal die voornamelijk wordt gebruikt voor het ontwikkelen van dynamische webpagina’s en webapplicaties. Het wordt op de server uitgevoerd, waardoor het mogelijk is om interacties met databases, gebruikersinvoer en andere dynamische content te verwerken voordat de output naar de browser wordt gestuurd. PHP is gemakkelijk te integreren met HTML en wordt vaak gebruikt in combinatie met databases zoals MySQL om krachtige, interactieve websites te creëren. 1- Openen van php . Voordat je php functies kunt gebruiken moet je eerst in je script aangeven dat de server een stuk php code moet gaan parsen ( verwerken ). Dit doe je door php te openen: &lt;?php . 2- Afsluiten van php . Net zoals met het openen van php moet je deze ook afsluiten. Dat doe je door met deze code: ?&gt; Maar als je na de php code geen html code hebt staan in je document dan mag je php niet afsluiten. Het kan dus zijn dat je in een bepaald document wel php opent, maar niet afsluit. 3- Data types . Elke variabele die je definiëert heeft een bepaald data type. Deze data types kom je in elke programmer taal tegen. De volgende 5 data types zijn de meest voorkomende: . 1. Integer . Een geheel getal zonder decimalen, bijvoorbeeld: 42 of -5. Voorbeeld: $age = 25; . 2. Float (Double) . Een getal met decimalen, bijvoorbeeld: 3.14 of -0.5. Voorbeeld: $price = 19.99; . 3. String . Een reeks tekens, zoals tekst of woorden, bijvoorbeeld: “Hallo wereld”. Voorbeeld: $name = 'John'; . 4. Boolean . Een binaire waarde die true (waar) of false (onwaar) kan zijn. Voorbeeld: $is_logged_in = true; . 5. Array . Een verzameling waarden in één variabele, bijvoorbeeld: een lijst van getallen of woorden. Voorbeeld: $fruits = array('Apple', 'Banana', 'Orange'); . 3- Quote gebruik . Bij het definiëren of weergave van een string in je code kun je twee verschillende quotes gebruiken met verschillende resultaten. Enkele quotes: ' $name = 'John'; Wanneer geprint laat deze de inhoud van de variabele zien: John $varname = 'literal text for $name'; Wanneer geprint laat deze variabele zien: literal text for $naam Dubbele quotes: \" $name = \"John\"; Wanneer geprint laat deze de inhoud van de variabele zien: John $varname = \"literal text for $name\"; Wanneer geprint laat deze variabele zien: literal text for John. 4- Escape sequenties . Net als bij andere talen is het goed mogelijk om code te escapen zodat deze bijvoorbeeld niet uitgevoerd wordt of niet een string afsluit. In php escape je door gebruik te maken van een backslash \\ \\\\ Geeft een \\ \\' Geeft een ‘ $varname = 'I\\'m not crazy!'; Wanneer geprint laat deze variabele zien: I’m not crazy! Bij gebruik van dubbele quotes kun je ook gebruik maken van de volgende karakters: \\n geeft een newline-karakter \\r geeft een carriage return-karakter \\t geeft een tab-karakter \\$ geeft een dollar-teken ($) $varname = \"I'm not \\\"crazy!\\\"\"; Wanneer deze variabele geprint wordt is te zien: I’m not “crazy!” . 5- Expressies . Expressies kunnen combinaties van variabelen, operatoren, waarden, functies en constanten bevatten. Het resultaat wordt tijdens het parsen geëvalueerd. Bijvoorbeeld: echo 17 + 3; Wanneer geprint laat deze variabele zien: 20 Een expressie kan ook een enkele waarde hebben. echo 20; Let op, php probeert je te helpen bij het parsen van code. Als jij gaat rekenen met een string dan kunnen daar onverwachte resultaten uit komen. In dit voorbeeld: $waarde = '20appels' + 5; is de inhoud van $waarde 25 Als één van de waardes niet met een getal begint dan krijg je een error, bijvoorbeeld: $waarde = 'ik heb 20 appels' + 5; Warning: Uncaught TypeError: Unsupported operand types: string + int . 5- Commentaren in PHP . Binnen php kun je op verschillende manieren een commentaar schrijven bij jouw code. Deze code zal niet uitgevoerd worden en daardoor ook niet zichtbaar zijn in de browser. // Dit is een commentaar . # Dit is een commentaar . /* this is a multiline comment on more lines */ . Laat de verschillende commentaren niet in elkaar voorkomen (genest) dat geeft verwarring . Volgende stap: . Include en Require . ",
    "url": "/m5prog_opdrachtensite/les-3/php#php",
    
    "relUrl": "/les-3/php#php"
  },"67": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-3/php",
    
    "relUrl": "/les-3/php"
  },"68": {
    "doc": "Project omschrijving",
    "title": "Project omschrijving",
    "content": " ",
    "url": "/m5prog_opdrachtensite/project_description.html",
    
    "relUrl": "/project_description.html"
  },"69": {
    "doc": "Project omschrijving",
    "title": "Als een bezoeker van de website wil ik een overzicht van muziek singles hebben waar ik doorheen kan zoeken.",
    "content": "Op een web pagina wil ik een overzicht van minimaal 5 verschillende muziek singles waar ik door middel van een zoek formulier kan aangeven wat ik wil zien. Elke single heeft een eigen detail pagina. ",
    "url": "/m5prog_opdrachtensite/project_description.html#als-een-bezoeker-van-de-website-wil-ik-een-overzicht-van-muziek-singles-hebben-waar-ik-doorheen-kan-zoeken",
    
    "relUrl": "/project_description.html#als-een-bezoeker-van-de-website-wil-ik-een-overzicht-van-muziek-singles-hebben-waar-ik-doorheen-kan-zoeken"
  },"70": {
    "doc": "Project omschrijving",
    "title": "Muziek bibliotheek",
    "content": "Dit project bestaat uit verschillende onderdelen die samen één geheel gaan vormen, de informatie van de singles zal in een database staan. Dit is geen CRUD applicatie, aanpassingen doen wij direct in de database. ",
    "url": "/m5prog_opdrachtensite/project_description.html#muziek-bibliotheek",
    
    "relUrl": "/project_description.html#muziek-bibliotheek"
  },"71": {
    "doc": "Project omschrijving",
    "title": "Doel",
    "content": "Aan het eind van dit project heb je een website ontwikkeld en weet je hoe bestanden op een server gestructureerd moeten worden. ",
    "url": "/m5prog_opdrachtensite/project_description.html#doel",
    
    "relUrl": "/project_description.html#doel"
  },"72": {
    "doc": "Project omschrijving",
    "title": "Omschrijving",
    "content": "Er komen in dit project 3 verschillende type pagina’s: . | overzicht pagina, met een overzicht van muziek singles | detail pagina met informatie over het nummer | informatie pagina met statische tekst | . Op het een overzicht pagina zijn minimaal 5 singles van minimaal 3 verschillende artiesten zichtbaar. Per item is minimaal het volgende zichtbaar: . | Titel van het nummer | Naam van de artiest | Genre | Afbeelding | . Ergens op de home pagina komt een formulier met een zoek functie waardoor het resultaat gefilterd wordt, dit zoeken kan op basis van een drop-down én een open zoekveld. Als je de home pagina op een muziek item klikt, kom je op een vervolg pagina waar meer informatie over dit item staat: . | Titel van het nummer | Naam van de artiest | Genre | Duur van het nummer | Release datum ( jaar is goed genoeg ) | Lijst met andere nummers van deze artiest | Afbeelding van het nummer | . De informatie tekst pagina’s zijn standaard tekst pagina’s voor de volgende twee pagina’s: . | informatie over dit systeem | algemene voorwaarden | . ",
    "url": "/m5prog_opdrachtensite/project_description.html#omschrijving",
    
    "relUrl": "/project_description.html#omschrijving"
  },"73": {
    "doc": "Project omschrijving",
    "title": "Validatie",
    "content": ". | Als een gebruiker zoekt op een niet bestaande term dan moet dit weergegeven worden. | Als er een pagina opgevraagd wordt die niet gevonden is dan moet dit duidelijk gemaakt worden aan de bezoeker. | . ",
    "url": "/m5prog_opdrachtensite/project_description.html#validatie",
    
    "relUrl": "/project_description.html#validatie"
  },"74": {
    "doc": "Project omschrijving",
    "title": "Randvoorwaarden:",
    "content": ". | De applicatie moet ontwikkeld worden in PHP eventueel in combinatie met JavaScript. | Het lokaal ontwikkelen van dit project gaat via een Docker container. | De data wordt in de database opgeslagen | Er moet een error afhandeling zijn die de gebruiker informeert waarom een zoek actie wel of niet informatie terug geeft. | Deze module moet functioneren in de laatste versies van Chrome, Safari, Firefox en Edge | . ",
    "url": "/m5prog_opdrachtensite/project_description.html#randvoorwaarden",
    
    "relUrl": "/project_description.html#randvoorwaarden"
  },"75": {
    "doc": "Project omschrijving",
    "title": "Optioneel",
    "content": ". | Is het mogelijk om ook een afbeelding van de artiest weer te geven? | Als je in het overzicht op een single klikt, kun je dan de detail pagina in een modal ( popup ) weergeven? | . ",
    "url": "/m5prog_opdrachtensite/project_description.html#optioneel",
    
    "relUrl": "/project_description.html#optioneel"
  },"76": {
    "doc": "Les 4",
    "title": "RDBMS (relational database management system)",
    "content": "Een RDBMS (Relational Database Management System) is een systeem dat gegevens opslaat in tabellen, waarin elke tabel bestaat uit rijen en kolommen. Deze tabellen zijn onderling verbonden door relaties, wat het mogelijk maakt om complexe gegevensstructuren te beheren. RDBMS’en gebruiken SQL (Structured Query Language) voor het uitvoeren van bewerkingen zoals het opvragen, invoegen, bijwerken en verwijderen van gegevens. Dit type systeem waarborgt de integriteit van de gegevens en maakt het eenvoudig om gegevensconsistentie te garanderen, wat essentieel is voor veel toepassingen in verschillende sectoren. Docker . In jouw docker-compose.yml staat het volgende stuk code: . mariadb: image: mariadb:latest container_name: prog_m5_mariadb environment: MYSQL_DATABASE: '${DB_NAME}' MYSQL_USER: '${DB_USERNAME}' MYSQL_PASSWORD: '${DB_PASSWORD}' MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}' . Hier zie je dat er een RDBMS in de vorm van een mariadb container hebt. Hier staat jouw data in opgeslagen. Sommige mensen hebben ook nog een volume, dat betekend dat de data niet binnen de container is opgeslagen maar erbuiten. Voor nu maakt dan niet uit. Volgende stap: . RDBMS beheer tool . ",
    "url": "/m5prog_opdrachtensite/les-4/rdbms#rdbms-relational-database-management-system",
    
    "relUrl": "/les-4/rdbms#rdbms-relational-database-management-system"
  },"77": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-4/rdbms",
    
    "relUrl": "/les-4/rdbms"
  },"78": {
    "doc": "Les 6",
    "title": "Redirect naar index.php",
    "content": "Voor gebruikers en zoekmachines is het belangrijk dat een url zo leesbaar mogelijk is. Binnen ons project gaan wij nu leesbare url’s implementeren, dit betekend dat de naam van het nummer in de url staat in plaats van het id uit de database. Hiervoor gebruiken wij een htaccess bestand. Een .htaccess-bestand is essentieel voor het afhandelen van alle requests via een enkel index.php-bestand omdat het je in staat stelt om URL-rewrites te configureren. Dit betekent dat je schoonere, gebruiksvriendelijke URL’s kunt maken die er beter uitzien en gemakkelijker te onthouden zijn, terwijl ze toch naar dezelfde index.php-file verwijzen. 1- htaccess file . Maak een nieuw bestand en sla deze op in de root van de public folder. Noem dit bestand .htaccess . 2- Configureer . Plaats de volgende code in dit bestand: . # zet de engine aan RewriteEngine On # zeg wat er moet gebeuren, in dit geval verwijs ik alles zonder een punt naar de index.php-file RewriteRule !(\\.) index.php [L] . ",
    "url": "/m5prog_opdrachtensite/les-6/redirect#redirect-naar-indexphp",
    
    "relUrl": "/les-6/redirect#redirect-naar-indexphp"
  },"79": {
    "doc": "Les 6",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele single weergeven. verwerken van url . ",
    "url": "/m5prog_opdrachtensite/les-6/redirect#commit-en-push",
    
    "relUrl": "/les-6/redirect#commit-en-push"
  },"80": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-6/redirect",
    
    "relUrl": "/les-6/redirect"
  },"81": {
    "doc": "Les 7",
    "title": "Registreren van een custom post type",
    "content": "In deze les ga je een custom post type registreren. Ik gebruik wood als voorbeeld, jij moet voor jezelf een ander type gaan gebruiken. 1- Structuur . Om mijn project gestructureerd te houden heb ik eerst een folder aangemaakt in CammelCase met de naam van het thema. In mijn geval M8progCustom Hierin plaats ik de functionaliteiten, om te beginnen met post-types, daarom heb ik daarom het volgende php document aangemaakt: PostType.php Dit bestand moet je natuurlijk wel laden, dat doe je door deze via de php require_once te implementeren in de functions.php. 2- Labels . Voordat wij gaan registreren definiëer ik de labels van dit post-type zodat straks dit element goed terug kan vinden. Dit doe ik door in mijn PostType.php document de volgende code te plaatsen. ",
    "url": "/m5prog_opdrachtensite/les-7/register#registreren-van-een-custom-post-type",
    
    "relUrl": "/les-7/register#registreren-van-een-custom-post-type"
  },"82": {
    "doc": "Les 7",
    "title": "Let op dat je de juiste term en text-domein gebruikt!",
    "content": "$labels = [ 'name' =&gt; __( 'Woods', 'Text_Domain' ), 'singular_name' =&gt; __( 'Wood', 'Text_Domain' ), 'add_new' =&gt; __( 'New Wood', 'Text_Domain' ), 'add_new_item' =&gt; __( 'Add New Wood', 'Text_Domain' ), 'edit_item' =&gt; __( 'Edit Wood', 'Text_Domain' ), 'new_item' =&gt; __( 'New Wood', 'Text_Domain' ), 'view_item' =&gt; __( 'View Wood', 'Text_Domain' ), 'search_items' =&gt; __( 'Search Wood', 'Text_Domain' ), 'not_found' =&gt; __( 'No Wood Found', 'Text_Domain' ), 'not_found_in_trash' =&gt; __( 'No Wood found in Trash', 'Text_Domain' ), ]; . 3- Definiëren van de argumenten voor je custom post type . De volgende stap is het definiëren van de argumenten. Eén van de argumenten is de array met labels die we al toegevoegd hebben. Onder de labels, en nog steeds binnen de haken, voeg je dit toe: . $args = [ 'labels' =&gt; $labels, 'has_archive' =&gt; true, 'public' =&gt; true, 'hierarchical' =&gt; false, 'supports' =&gt; [ 'title', 'editor', 'excerpt', 'custom-fields', 'thumbnail', 'page-attributes', ], 'rewrite' =&gt; [ 'slug' =&gt; 'wood' ], 'show_in_rest' =&gt; true, ]; . Laten we eens kijken wat deze allemaal doen: . | Labels: de array met labels die we al eerder definieerden. | has_archive: zorgt dat je een post type archief voor je custom post type kunt maken. | public: zorgt dat het post type ook verschijnt binnen de zoekresultaten. Dit staat standaard uit en wil ik graag inschakelen. | hierarchical waarde hangt af van hoe je precies je custom post type wilt gaan gebruiken. Als je dit op true zet, zal het post type zich gedragen als het pagina-type, waarbij je een hiërarchie kunt aanbrengen met parent en child-berichten. Als je dit op false zet, zal het zich gedragen als een gewoon bericht, zonder hiërarchie. | supports array definieert een aantal features van post types die dit custom type kan ondersteunen. Verschillende opties zijn: ‘title’, ‘editor’, ‘comments’, ‘revisions’, ‘trackbacks’, ‘author’, ‘excerpt’, ‘page-attributes’, ‘thumbnail’, ‘custom-fields’, en ‘post-formats’. | rewrite kun je gebruiken om je taxonomie een andere te geven. | show_in_rest zorgt ervoor dat het post type toegankelijk is via de REST API en de admin interface. Hier vind je de complete uitleg: https://developer.wordpress.org/reference/functions/register_post_type/ | . 4- Registratie . Het registreren is nadat je alles hebt ingesteld super simpel, je hoeft alleen de post-type en de argumenten door te geven. register_post_type( 'wood', $args ); . 3- Controleer . Ga nu naar je admin omgeving en zie dat in het menu een nieuw item is toegevoegd. Voeg nu minimaal 2 custom post types toe aan je website. Links . https://developer.wordpress.org/reference/functions/register_post_type/ https://developer.wordpress.org/reference/functions/register_taxonomy/ . ",
    "url": "/m5prog_opdrachtensite/les-7/register#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt",
    
    "relUrl": "/les-7/register#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt"
  },"83": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende opdracht ga je een categorie toevoegen. Registreren van een taxonomie . ",
    "url": "/m5prog_opdrachtensite/les-7/register#commit-en-push",
    
    "relUrl": "/les-7/register#commit-en-push"
  },"84": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-7/register",
    
    "relUrl": "/les-7/register"
  },"85": {
    "doc": "Les 6",
    "title": "Verwerken van url",
    "content": "Je request komt nu aan in de index.php nu moeten wij in de index.php de request verwerken en de juiste informatie ophalen. 1- Pas de index.php aan . Haal de url op, bijvoorbeeld: http://localhost/genre/single Plaats deze php code in je index.php . var_dump( $_SERVER['REDIRECT_URL'] ); . Als je de bovenstaande url bekijkt dan zie je dat je in php de url kunt opvangen. 2- Array . Zet de request nu om in een array door de bovenstaande code te vervangen door: . $request_url = explode('/', $_SERVER['REDIRECT_URL']); . 3- Juiste pagina ophalen . Zoek nu het laatste onderdeel uit de array. Dit is de slug van dit nieuwsbericht . $mijn_pagina = end($request_url); . Controleer dit maar: . echo 'ik bekijk nu het bericht: ' . $mijn_pagina; . 4- Controleer . Bekijk je website nu in de browser. Kun je de url aanpassen en zie je nu dit terug in de waardes op het scherm? . ",
    "url": "/m5prog_opdrachtensite/les-6/request_url#verwerken-van-url",
    
    "relUrl": "/les-6/request_url#verwerken-van-url"
  },"86": {
    "doc": "Les 6",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele single weergeven. Data uit database ophalen . ",
    "url": "/m5prog_opdrachtensite/les-6/request_url#commit-en-push",
    
    "relUrl": "/les-6/request_url#commit-en-push"
  },"87": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-6/request_url",
    
    "relUrl": "/les-6/request_url"
  },"88": {
    "doc": "Les 5",
    "title": "Overzicht pagina maken vanuit de database",
    "content": "In PHP worden GET, POST, en REQUEST gebruikt om gegevens te ontvangen van een formulier of een URL: GET: Hiermee haal je gegevens op die via de URL worden meegestuurd. De gegevens zijn zichtbaar in de browserbalk en worden opgehaald via $GET[]. _Geschikt voor kleine en niet-gevoelige data. POST: Hiermee verstuur je gegevens via het HTTP-body, waardoor ze niet zichtbaar zijn in de URL. Je haalt de data op met $POST[]. _Geschikt voor grotere en gevoeligere data, zoals wachtwoorden. REQUEST: Dit bevat zowel GET als POST data en haalt informatie op via $REQUEST[]. _Meestal minder specifiek, omdat het uit beide methodes kan komen. 1- Get waarde ophalen . In single.php kun je het stukje code om de single id te definiëren zo aanpassen dat er een waarde uit de url opgehaald wordt. Gebruik daarvoor de $_GET[] methode. Ik roep mijn single pagina nu ana met een variabele single: http://localhost/single.php?single=2 Deze kan ik bijvoorbeeld zo ophalen: . $single_id = $_GET['single']; . Om errors te voorkomen als er geen parameter verstuurd is pas ik dit stukje code zo aan dat hij een waarschuwing geeft. if ( ! isset($_GET['single']) ) { die( 'Geen single gevonden' ); } $single_id = $_GET['single']; . 2- Get waarde versturen . Ga nu naar je card.php en maak een a href tag die de gebruiker naar de single.php pagina stuurt. Dit kan er bijvoorbeeld zo uit zien: . &lt;a href=\"/single.php?single=&lt;?php echo $single['id'] ?&gt;\" type=\"button\" class=\"btn btn-sm btn-outline-secondary\"&gt;Bekijk&lt;/a&gt; . 3- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content uit de database boven de singles staan. ",
    "url": "/m5prog_opdrachtensite/les-5/requests#overzicht-pagina-maken-vanuit-de-database",
    
    "relUrl": "/les-5/requests#overzicht-pagina-maken-vanuit-de-database"
  },"89": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-5/requests#commit-en-push",
    
    "relUrl": "/les-5/requests#commit-en-push"
  },"90": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-5/requests",
    
    "relUrl": "/les-5/requests"
  },"91": {
    "doc": "Les 5",
    "title": "Single pagina",
    "content": "Als je op een single klikt dan is het fijn om naar een detail pagina te navigeren, daar gaan wij nu mee aan de slag. 1- Implementeer de database . Maak nu in de single.php dezelfde verbinding met de database als je in de index.php hebt gemaakt. Plaats de queries tot en met de while loop boven de plek waar je de data wilt weergeven. 2- Variabele van een single . Voor nu plaats je bovenaan dit document een variabele $single_id en vult daarin een ID van je singles tabel, bijvoorbeeld 1. 3- Pas de query aan . Nu moet je de mysql query zo aanpassen dat er een variabele id in komt, door een WHERE toe te voegen. Bijvoorbeeld: . WHERE singles.id=? . Mijn query ziet er momenteel zo uit: . SELECT singles.*, artists.title as artist_title, genres.title as genre_title FROM singles LEFT JOIN artists ON singles.artist_id = artists.id LEFT JOIN genres ON singles.genre_id = genres.id WHERE singles.id=? . 4- Bind een parameter . Omdat wij gebruik maken van een prepare waarbij van te voren zeggen wat de query is en later een variabele invullen heb je minder kans op mysql injecties. Bij het binden van een parameter kun je per parameter aangeven welke type het is, je hebt keuze uit: i - integer d - double s - string b - BLOB . In dit geval is de $single_id een int, daardoor is de bind code als volgt: . /* Bind the slug */ $stmt-&gt;bind_param('i', $single_id); . Plaats deze code na de prepare regel. 5- Verwijder de while loop . Je hebt de while loop niet meer nodig omdat je nu maar één item ophaalt uit de database. Daarom kun je de while loop vervangen met een enkele regel. Deze code: . while( $single = mysqli_fetch_assoc($result) ) { print_r( $single ); } . Kun je vervangen door . $single = mysqli_fetch_assoc($result); print_r( $single ); . 6- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content uit de database voor één specifieke single. Pas nu de weergave aan zodat deze pagina er goed uit ziet. ",
    "url": "/m5prog_opdrachtensite/les-5/single#single-pagina",
    
    "relUrl": "/les-5/single#single-pagina"
  },"92": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele pagina of blog item weergeven. overzicht pagina . ",
    "url": "/m5prog_opdrachtensite/les-5/single#commit-en-push",
    
    "relUrl": "/les-5/single#commit-en-push"
  },"93": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-5/single",
    
    "relUrl": "/les-5/single"
  },"94": {
    "doc": "Les 7",
    "title": "Registreren van een custom post type",
    "content": "Nu ga je een taxonomy registreren zodat je custom post type onderverdeeld kan worden in categorieën. 1- Labels . Voordat wij gaan registreren definiëer ik de labels van deze taxonomy. Dit doe ik door in mijn PostType.php document de volgende code te plaatsen. ",
    "url": "/m5prog_opdrachtensite/les-7/taxonomy#registreren-van-een-custom-post-type",
    
    "relUrl": "/les-7/taxonomy#registreren-van-een-custom-post-type"
  },"95": {
    "doc": "Les 7",
    "title": "Let op dat je de juiste term en text-domein gebruikt!",
    "content": "$labels = [ 'name' =&gt; _x( 'Origins', 'taxonomy general name', 'Text_Domain' ), 'singular_name' =&gt; _x( 'Origin', 'taxonomy singular name', 'Text_Domain' ), 'search_items' =&gt; __( 'Search Origins', 'Text_Domain' ), 'popular_items' =&gt; __( 'Popular Origins', 'Text_Domain' ), 'all_items' =&gt; __( 'All Origins', 'Text_Domain' ), 'parent_item' =&gt; __( 'Parent Origin', 'Text_Domain' ), 'parent_item_colon' =&gt; __( 'Parent Origin:', 'Text_Domain' ), 'edit_item' =&gt; __( 'Edit Origin', 'Text_Domain' ), 'update_item' =&gt; __( 'Update Origin', 'Text_Domain' ), 'add_new_item' =&gt; __( 'Add New Origin', 'Text_Domain' ), 'new_item_name' =&gt; __( 'New Origin Name', 'Text_Domain' ), 'menu_name' =&gt; __( 'Origins', 'Text_Domain' ), ]; . 2- Definiëren van de argumenten voor je taxonomy . De volgende stap is het definiëren van de argumenten. Eén van de argumenten is de array met labels die we al toegevoegd hebben. Onder de labels, en nog steeds binnen de haken, voeg je dit toe: . $args = [ 'hierarchical' =&gt; true, 'labels' =&gt; $labels, 'show_ui' =&gt; true, 'show_admin_column' =&gt; true, 'query_var' =&gt; true, 'show_in_rest' =&gt; true, 'rewrite' =&gt; [ 'slug' =&gt; 'origin' ], ]; . Laten we eens kijken wat deze allemaal doen: . | hierarchical waarde hangt af van hoe je precies je custom post type wilt gaan gebruiken. Als je dit op true zet, zal het post type zich gedragen als het pagina-type, waarbij je een hiërarchie kunt aanbrengen met parent en child-berichten. Als je dit op false zet, zal het zich gedragen als een gewoon bericht, zonder hiërarchie. | labels: de array met labels die we al eerder definieerden. | show_ui is dit onderdeel wel of niet zichtbaar in de admin omgeving | show_admin_column in het admin overzicht van mijn custom post types kan er een kolom bij komen met deze taxonomy | query_var mag dit element wel of niet opgehaald worden via de wp-query | show_in_rest zorgt ervoor dat het post type toegankelijk is via de REST API en de admin interface. | rewrite wil je dat de slug voor deze taxonomy niet gelijk is aan de naam? Hier vind je de complete uitleg: https://developer.wordpress.org/reference/functions/register_taxonomy/ | . 3- Registratie . Het registreren is nadat je alles hebt ingesteld super simpel, je hoeft alleen de post-type en de argumenten door te geven. register_taxonomy( 'origin', 'wood', $args ); . 3- Controleer . Ga nu naar je admin omgeving en zie dat in het menu een nieuw item is toegevoegd. En dat je bij het bewerken van een custom post type item een categorie kunt selecteren of aanmaken. Voeg nu minimaal 2 taxonomies toe en koppel deze aan een of meerdere custom post types. Links . https://developer.wordpress.org/reference/functions/register_post_type/ https://developer.wordpress.org/reference/functions/register_taxonomy/ . ",
    "url": "/m5prog_opdrachtensite/les-7/taxonomy#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt",
    
    "relUrl": "/les-7/taxonomy#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt"
  },"96": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende opdracht ga je deze taxonomy én post type weergeven op jouw site. Weergeven van een Custom post type . ",
    "url": "/m5prog_opdrachtensite/les-7/taxonomy#commit-en-push",
    
    "relUrl": "/les-7/taxonomy#commit-en-push"
  },"97": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-7/taxonomy",
    
    "relUrl": "/les-7/taxonomy"
  },"98": {
    "doc": "Les 1",
    "title": "Testen",
    "content": "Na de installatie kun je jouw website testen. 1- Controle website . Ga in je browser naar http://localhost en bekijk jouw website. 2- Controle database . Ga in je browser naar http://localhost:8805 en controleer of je geen errors ziet in de phpmyadmin omgeving . ",
    "url": "/m5prog_opdrachtensite/les-1/testen#testen",
    
    "relUrl": "/les-1/testen#testen"
  },"99": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-1/testen",
    
    "relUrl": "/les-1/testen"
  },"100": {
    "doc": "Les 4",
    "title": "RDBMS Beheer tool",
    "content": "Er zijn verschillende tools die je kunt gebruiken en de afgelopen tijd gebruikt hebt. Bijvoorbeeld: . | Workbench | Sequel Pro | HeidiSQL | PHP Myadmin | . Poort open zetten . Voor de externe tools moet je een poort open zetten, weet je nog hoe je dit in het docker-compose.yml bestand in stelt? Je geeft een externe én interne poort aan per container. De interne mysql poort moet 3306 zijn, anders werkt deze niet. De externe poort kun je zelf verzinnen, bijvoorbeeld 3356. Stel nu een externe poort in bij je mariadb service. Dit kan ervoor zorgen dat je mariadb service er bijvoorbeeld zo uit ziet: . mariadb: image: mariadb:latest container_name: prog_m5_mariadb environment: MYSQL_DATABASE: '${DB_NAME}' MYSQL_USER: '${DB_USERNAME}' MYSQL_PASSWORD: '${DB_PASSWORD}' MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}' ports: - 3356:3306 . Build nu docker opnieuw met het volgende commando: . docker-compose up --build . Test de verbinding . Maak nu met je externe tool, bijvoorbeeld HeidiSQL een verbinding naar de database server. De host is: 127.0.0.1 ( localhost) De poort heb je net ingesteld. De username en wachtwoord vind je terug in je .env file. PHP Myadmin . Naast de stand alone tools is er ook een web based too, namelijk PHPMyadmin. Deze tool is web based en kun je op een server installeren zoals je ook met een website doet. Het voordeel is dat je niet een poort open hoeft te zetten. Zorg er altijd voor dat als je deze too gebruikt hij nooit phpmyadmin in de url heeft. Voor nu kun je de tool vanuit Docker Desktop openen. Keuze . Probeer beide tools uit en bekijk welke too voor jou het prettigst werkt. Volgende stap: . Data structureren . ",
    "url": "/m5prog_opdrachtensite/les-4/tool#rdbms-beheer-tool",
    
    "relUrl": "/les-4/tool#rdbms-beheer-tool"
  },"101": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-4/tool",
    
    "relUrl": "/les-4/tool"
  },"102": {
    "doc": "Les 7",
    "title": "Weergeven van custom post types",
    "content": "Uiteindelijk is het doel om deze items weer te geven aan de voorkant van je website. In het wp-admin gedeelte heb je alvast een paar items toegevoegd, deze kunnen wij nu gaan weergeven. Dit gaan wij op verschillende manieren doen: . | via het menu | via een widget | via de categorie | de pagina zelf | . 1- De post type toevoegen aan het menu . Dit is eigenlijk de makkelijkste omdat je hier geen code voor hoeft te schrijven. | ga in het admin menu naar het menu onderdeel toe. | selecteer aan de zijkant je custom post type | klik op view all en selecteer je post type | klik op ‘Add to Menu’ | Sla het menu op | Bekijk nu je website in je browser en zie dat je een nieuw menu item hebt. | . 2- De post type toevoegen aan een widget . In het wp-admin gedeelte kun je via de customizer of direct naar het widgets menu gaan. Hier kun je een tekst plaatsen met een link naar de slug van jouw custom post type, bij mij is dat \\wood. Gebruik hiervoor de link knop, of schrijf dit zelf in HTML. 3- Weergave van de categorie . Jouw custom post type is te bereiken door de slug als endpoint in de browser toe te voegen, in mijn geval: localhost/wood Om een mooi overzicht te krijgen maak ik hier ook een speciale archief pagina van door de index te dupliceren naar archive-wood.php ( bij jou is dat natuurlijk niet wood, maar jouw eigen post type ) In dit overzicht heb ik bijvoorbeeld de thumbnails weergegeven en een titel toegevoegd. Op dezelfde manier kunnen wij ook de categorie weergeven, nu alleen met de categorie in de titel. Ik kopieer nu de archive-wood.php naar taxonomy-origin.php Het enige dat ik voorlopig aanpas is de titel, daarvan maak ik: . &lt;h1&gt; Dit is mijn categorie: &lt;?php single_term_title() ?&gt; &lt;/h1&gt; . 4- Controleer . Als je nu naar jouw website gaat in de browser dan zie je dat je op verschillende manieren naar jouw custom post type kan gaan. Ook zie je dat je overzicht pagina’s hebt en verschillende enkele pagina’s. Het klopt dat er nu hier en daar duplicated code is, maar daar gaan wij een volgende stap mee aan de slag. ",
    "url": "/m5prog_opdrachtensite/les-7/view#weergeven-van-custom-post-types",
    
    "relUrl": "/les-7/view#weergeven-van-custom-post-types"
  },"103": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-7/view#commit-en-push",
    
    "relUrl": "/les-7/view#commit-en-push"
  },"104": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-7/view",
    
    "relUrl": "/les-7/view"
  },"105": {
    "doc": "Les 2",
    "title": "Webpack integreren",
    "content": "Om de SCSS en JavaScript assets te compilen maak ik gebruik van npm in combinatie met webpack. ",
    "url": "/m5prog_opdrachtensite/les-2/webpack#webpack-integreren",
    
    "relUrl": "/les-2/webpack#webpack-integreren"
  },"106": {
    "doc": "Les 2",
    "title": "Let op, straks wordt er een node_modules folder gegenereerd, deze mag niet in git.",
    "content": ". 1- Structuur . Eerst heb je een structuur nodig. Maak in je project een aantal folders en bestanden die je als basis nodig hebt: . | /public/src/js ( dit is de locatie van je javascripts die niet minified zijn ) | /public/src/js/main.js ( dit is je js bestand met minimaal een console.log() functie erin ) | /public/src/scss ( hierin staan je SASS bestanden ) | /public/src/scss/_custom.scss ( je scss bestand met bijvoorbeeld je sass code ) | /public/src/scss/main.scss ( je scss bestand met bijvoorbeeld je sass code ) | /package.json ( hier staat in welke packages er nodig zijn zoals een sass compiler ) | /webpack.config.js ( hier zijn de functies gedefinieerd voor het compilen van de sass ) Je kunt een voorbeeld van dit pakket bestanden ook hier downloaden: example | . 2- package.json . In de package.json kun je aangeven hoe je project heet en wat de locatie van webpack.config.js is. Je vind ook diverse dependencies die nodig zijn voor het compilen van dit project. Daarnaast zie je ook welke scripts er zijn en welke actie die uitvoeren, bijvoorbeeld dev en build. 3- webpack.config.js . In de webpack.config.js vind je de acties die uitgevoerd worden tijdens het compilen. 4- _custom.scss . Plaats in dit bestand de volgende code: . $body-bg: #fff; $body-color: #111; $blue: #283d42; $indigo: #6610f2 !default; $purple: #6f42c1 !default; $pink: #e83e8c !default; $red: #e72d2d !default; $orange: #b6683a; $yellow: #ffc107 !default; $green: #28a745 !default; $teal: #20c997 !default; $cyan: #17a2b8 !default; $font-family-monospace: Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace !default; $headings-font-family: $font-family-monospace; . 5- main.scss . Plaats in dit bestand de volgende code: . @import \"custom\"; @import \"~bootstrap/scss/bootstrap\"; . Eventueel kun je onderaan nog een paar regels css plaatsen om bijvoorbeeld de achtergrond aan te passen. 6- Packages installeren . Het installeren van de packages (dependencies) doe je via npm. Navigeer daarvoor in de terminal naar je project folder en voer het volgende commando uit: . npm i . ( Een afkorting voor npm install ) Je ziet nu een node_modules folder in je thema folder. Note: Zorg ervoor dat je de node_modules in je .gitignore hebt staan zodat deze niet gepushed wordt naar je repo. 7- Packages compilen . Om de sass en de javascripts te compilen en in een dist folder te plaatsen kun je het volgende commando uitvoeren: . npm run dev . Note Het kan zijn dat je deze error ziet: In dat geval moet je de sass-loader opnieuw installeren met dit commando: . npm i sass-loader . Daarna kun je weer compilen via: . npm run dev . 8- Scripts toevoegen aan de website . Geef in je header aan dat je de css wilt laden uit je dist folder, bijvoorbeeld zo: . &lt;link href=\"/dist/css/main.min.css\" rel=\"stylesheet\"&gt; . De andere links naar de css bestanden kun je verwijderen. 9- Scripts toevoegen aan de website . Geef in je footer aan dat je de javascript file wilt laden uit je dist folder, bijvoorbeeld zo: . &lt;script src=\"/dist/js/main.js\"&gt;&lt;/script&gt; . De andere links naar de javascript bestanden kun je verwijderen. 10- Controleer . Bekijk je website nu in de browser. 11- Customize JavaScript . Pas nu de main.js aan door bijvoorbeeld een console.log die aangeeft dat het script werkt toe te voegen. 12- Customize CSS . Pas nu de scss en vormgeving een beetje nu aan zodat de website voldoet aan de eisen van jouw project. Bijvoorbeeld door de achtergrond aan te passen. ",
    "url": "/m5prog_opdrachtensite/les-2/webpack#let-op-straks-wordt-er-een-node_modules-folder-gegenereerd-deze-mag-niet-in-git",
    
    "relUrl": "/les-2/webpack#let-op-straks-wordt-er-een-node_modules-folder-gegenereerd-deze-mag-niet-in-git"
  },"107": {
    "doc": "Les 2",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m5prog_opdrachtensite/les-2/webpack#commit-en-push",
    
    "relUrl": "/les-2/webpack#commit-en-push"
  },"108": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m5prog_opdrachtensite/les-2/webpack",
    
    "relUrl": "/les-2/webpack"
  }
}
